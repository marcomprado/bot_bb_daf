"""
Classe principal respons√°vel pela automa√ß√£o web usando Selenium
"""

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.keys import Keys
import time
from config import SISTEMA_CONFIG, SELETORES_CSS


class WebScrapingBot:
    """
    Classe principal respons√°vel pela automa√ß√£o web do sistema de arrecada√ß√£o federal
    
    Funcionalidades:
    - Configura√ß√£o e inicializa√ß√£o do navegador Chrome
    - Navega√ß√£o e intera√ß√£o com elementos da p√°gina
    - Preenchimento autom√°tico de formul√°rios
    - Processamento de m√∫ltiplas cidades
    - Tratamento de erros e recupera√ß√£o autom√°tica
    """
    
    def __init__(self, url=None, timeout=None):
        """
        Inicializa o bot de web scraping
        
        Args:
            url (str): URL do sistema a ser acessado (padr√£o: config.py)
            timeout (int): Tempo limite para espera de elementos (padr√£o: config.py)
        """
        self.url = url or SISTEMA_CONFIG['url_sistema']
        self.timeout = timeout or SISTEMA_CONFIG['timeout_selenium']
        self.navegador = None
        self.wait = None
        self.data_extractor = None  # Extrator de dados (opcional)
        
        print(f"ü§ñ WebScrapingBot inicializado para URL: {self.url}")
        print(f"‚è±Ô∏è Timeout configurado: {self.timeout} segundos")
    
    def configurar_extrator_dados(self, data_extractor):
        """
        Configura o extrator de dados para processamento autom√°tico
        
        Args:
            data_extractor: Inst√¢ncia da classe DataExtractor
        """
        self.data_extractor = data_extractor
        print("üìä Extrator de dados configurado - dados ser√£o extra√≠dos automaticamente")
    
    def configurar_navegador(self):
        """
        Configura e inicializa o navegador Chrome com o ChromeDriver
        
        Returns:
            bool: True se a configura√ß√£o foi bem-sucedida, False caso contr√°rio
        """
        try:
            print("üîß Configurando o servi√ßo do Chrome...")
            # O ChromeDriverManager baixa automaticamente a vers√£o correta do ChromeDriver
            # compat√≠vel com o Chrome instalado no sistema
            servico = Service(ChromeDriverManager().install())
            
            print("üåê Inicializando o navegador Chrome...")
            # Cria uma inst√¢ncia do webdriver Chrome utilizando o servi√ßo configurado
            self.navegador = webdriver.Chrome(service=servico)
            
            # Configura o WebDriverWait para aguardar elementos aparecerem
            self.wait = WebDriverWait(self.navegador, self.timeout)
            
            print("‚úÖ Navegador configurado com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao configurar navegador: {e}")
            return False
    
    def abrir_pagina_inicial(self):
        """
        Abre a p√°gina inicial do sistema e aguarda carregar
        
        Returns:
            bool: True se a p√°gina foi carregada com sucesso, False caso contr√°rio
        """
        try:
            print(f"üîó Abrindo a URL: {self.url}")
            self.navegador.get(self.url)
            
            print("‚è≥ Aguardando a p√°gina carregar...")
            # Aguarda o campo de nome do benefici√°rio aparecer para confirmar que a p√°gina carregou
            campo_beneficiario = self.wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, SELETORES_CSS['campo_beneficiario']))
            )
            
            print("‚úÖ P√°gina inicial carregada com sucesso!")
            return True
            
        except TimeoutException:
            print("‚ùå Erro: A p√°gina demorou muito para carregar ou o campo n√£o foi encontrado.")
            return False
        except Exception as e:
            print(f"‚ùå Erro inesperado ao abrir p√°gina: {e}")
            return False
    
    def preencher_nome_cidade(self, cidade):
        """
        Preenche o campo "Nome do Benefici√°rio" com o nome da cidade
        
        Args:
            cidade (str): Nome da cidade a ser inserida
        
        Returns:
            bool: True se o preenchimento foi bem-sucedido, False caso contr√°rio
        """
        try:
            # Localiza o campo usando o seletor configurado
            campo_beneficiario = self.wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, SELETORES_CSS['campo_beneficiario']))
            )
            
            # Limpa o campo e digita o nome da cidade
            campo_beneficiario.clear()
            campo_beneficiario.send_keys(cidade)
            print(f"‚úÖ Nome da cidade '{cidade}' inserido no campo.")
            
            # Aguarda um momento para o sistema processar a entrada
            time.sleep(SISTEMA_CONFIG['pausa_apos_preenchimento'])
            
            return True
            
        except TimeoutException:
            print(f"‚ùå Erro: Campo de nome do benefici√°rio n√£o encontrado para '{cidade}'")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao preencher nome da cidade '{cidade}': {e}")
            return False
    
    def selecionar_cidade_mg(self, cidade):
        """
        Clica no bot√£o seletor e escolhe especificamente a cidade do estado MG
        
        Args:
            cidade (str): Nome da cidade para buscar com estado MG
        
        Returns:
            bool: True se a sele√ß√£o foi bem-sucedida, False caso contr√°rio
        """
        try:
            print(f"üîç Procurando bot√£o seletor para cidade '{cidade}'...")
            
            # Aguarda e clica no bot√£o seletor de benefici√°rio
            botao_seletor = self.wait.until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, SELETORES_CSS['botao_seletor_beneficiario']))
            )
            
            print(f"üîΩ Clicando no seletor de benefici√°rio...")
            botao_seletor.click()
            
            # Aguarda o dropdown aparecer
            time.sleep(SISTEMA_CONFIG['pausa_entre_campos'])
            
            print(f"üîç Procurando op√ß√£o '{cidade} - MG' no dropdown...")
            
            # Procura por todas as op√ß√µes que cont√™m "MG" no title
            opcoes_mg = self.wait.until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, SELETORES_CSS['opcao_cidade_mg']))
            )
            
            # Procura pela cidade espec√≠fica do MG
            cidade_encontrada = False
            for opcao in opcoes_mg:
                title_opcao = opcao.get_attribute('title')
                if title_opcao and cidade.upper() in title_opcao.upper():
                    print(f"‚úÖ Encontrada op√ß√£o: {title_opcao.strip()}")
                    
                    # Clica na op√ß√£o da cidade MG
                    opcao.click()
                    print(f"‚úÖ Cidade '{cidade} - MG' selecionada com sucesso!")
                    cidade_encontrada = True
                    
                    # Aguarda a sele√ß√£o ser processada
                    time.sleep(SISTEMA_CONFIG['pausa_apos_preenchimento'])
                    break
            
            if not cidade_encontrada:
                print(f"‚ùå Cidade '{cidade} - MG' n√£o encontrada nas op√ß√µes dispon√≠veis")
                # Lista op√ß√µes dispon√≠veis para debug
                print("üìã Op√ß√µes MG dispon√≠veis:")
                for opcao in opcoes_mg:
                    title = opcao.get_attribute('title')
                    if title:
                        print(f"   - {title.strip()}")
                return False
            
            return True
            
        except TimeoutException:
            print(f"‚ùå Erro: Bot√£o seletor ou op√ß√µes MG n√£o encontrados para '{cidade}'")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao selecionar cidade MG '{cidade}': {e}")
            return False
    
    def clicar_botao_continuar(self):
        """
        Clica no bot√£o "Continuar" para avan√ßar para a pr√≥xima etapa
        
        Returns:
            bool: True se o clique foi bem-sucedido, False caso contr√°rio
        """
        try:
            print("üîç Procurando o primeiro bot√£o 'Continuar'...")
            # Localiza o primeiro bot√£o usando o seletor configurado
            botao_continuar = self.wait.until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, SELETORES_CSS['botao_continuar_inicial']))
            )
            
            # Clica no bot√£o Continuar para avan√ßar para a pr√≥xima etapa
            botao_continuar.click()
            print("‚úÖ Bot√£o 'Continuar' clicado com sucesso!")
            
            # Aguarda a p√°gina de sele√ß√£o de datas carregar completamente
            time.sleep(SISTEMA_CONFIG['pausa_apos_clique'])
            return True
            
        except TimeoutException:
            print("‚ùå Erro: Bot√£o 'Continuar' n√£o encontrado ou n√£o clic√°vel")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao clicar no bot√£o Continuar: {e}")
            return False
    
    def preencher_datas(self, data_inicial, data_final):
        """
        Preenche os campos de data inicial e final
        
        Args:
            data_inicial (str): Data inicial no formato DD/MM/AAAA
            data_final (str): Data final no formato DD/MM/AAAA
        
        Returns:
            bool: True se o preenchimento foi bem-sucedido, False caso contr√°rio
        """
        try:
            print("üîç Procurando campos de data na nova p√°gina...")
            
            # Procura pelos campos de data usando o seletor configurado
            # Este seletor √© mais est√°vel que os IDs √∫nicos que podem mudar
            campos_data = self.wait.until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, SELETORES_CSS['campos_data']))
            )
            
            # Verifica se encontrou pelo menos 2 campos de data (inicial e final)
            if len(campos_data) >= 2:
                # Preenche o primeiro campo: Data inicial
                campo_data_inicial = campos_data[0]
                campo_data_inicial.clear()  # Limpa qualquer valor pr√©-existente
                campo_data_inicial.send_keys(data_inicial)  # Insere data no formato DD/MM/AAAA
                print(f"‚úÖ Data inicial preenchida: {data_inicial}")
                
                # Pequena pausa entre os preenchimentos para evitar conflitos
                time.sleep(SISTEMA_CONFIG['pausa_entre_campos'])
                
                # Preenche o segundo campo: Data final
                campo_data_final = campos_data[1]
                campo_data_final.clear()  # Limpa qualquer valor pr√©-existente
                campo_data_final.send_keys(data_final)  # Insere data no formato DD/MM/AAAA
                print(f"‚úÖ Data final preenchida: {data_final}")
                
                # Aguarda um momento para o sistema processar e validar as datas inseridas
                time.sleep(SISTEMA_CONFIG['pausa_apos_preenchimento'])
                return True
                
            else:
                print(f"‚ùå Erro: Esperados 2 campos de data, encontrados {len(campos_data)}")
                return False
                
        except TimeoutException:
            print("‚ùå Erro: Campos de data n√£o encontrados na p√°gina")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao preencher datas: {e}")
            return False
    
    def clicar_segundo_botao_continuar(self):
        """
        Clica no segundo bot√£o "Continuar" ap√≥s preencher as datas para ir para a pr√≥xima p√°gina
        Pressiona ESC antes do clique para fechar qualquer calend√°rio que possa estar bloqueando
        
        Returns:
            bool: True se o clique foi bem-sucedido, False caso contr√°rio
        """
        try:
            print("üîç Procurando o segundo bot√£o 'Continuar' (ap√≥s datas)...")
            
            # Aguarda um momento extra para garantir que a p√°gina processou as datas
            time.sleep(SISTEMA_CONFIG['pausa_entre_campos'])
            
            # Pressiona ESC para fechar qualquer calend√°rio aberto antes de clicar no bot√£o
            print("üìÖ Pressionando ESC para fechar calend√°rio...")
            self.navegador.find_element(By.TAG_NAME, 'body').send_keys(Keys.ESCAPE)
            time.sleep(SISTEMA_CONFIG['pausa_esc_calendario'])
            print("‚úÖ ESC pressionado para fechar calend√°rio")
            
            # Localiza e clica no segundo bot√£o "Continuar"
            botao_continuar_datas = self.wait.until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, SELETORES_CSS['botao_continuar_datas']))
            )
            
            botao_continuar_datas.click()
            print("‚úÖ Segundo bot√£o 'Continuar' clicado com sucesso!")
            
            # Aguarda a pr√≥xima p√°gina carregar completamente
            time.sleep(SISTEMA_CONFIG['pausa_apos_clique'])
            return True
            
        except TimeoutException:
            print("‚ùå Erro: Segundo bot√£o 'Continuar' n√£o encontrado")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao clicar no segundo bot√£o Continuar: {e}")
            return False
    
    def voltar_pagina_inicial(self):
        """
        Volta para a p√°gina inicial para processar a pr√≥xima cidade
        
        Returns:
            bool: True se conseguiu voltar com sucesso, False caso contr√°rio
        """
        try:
            print("üîÑ Voltando para a p√°gina inicial...")
            self.navegador.get(self.url)
            
            # Aguarda a p√°gina carregar novamente
            self.wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, SELETORES_CSS['campo_beneficiario']))
            )
            print("‚úÖ P√°gina inicial recarregada.")
            return True
            
        except TimeoutException:
            print("‚ùå Erro cr√≠tico: N√£o foi poss√≠vel voltar √† p√°gina inicial")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao voltar √† p√°gina inicial: {e}")
            return False
    
    def processar_cidade(self, cidade, data_inicial, data_final):
        """
        Processa uma cidade completa: nome ‚Üí continuar ‚Üí selecionar MG ‚Üí datas ‚Üí continuar
        
        Args:
            cidade (str): Nome da cidade
            data_inicial (str): Data inicial no formato DD/MM/AAAA
            data_final (str): Data final no formato DD/MM/AAAA
        
        Returns:
            bool: True se o processamento foi bem-sucedido, False caso contr√°rio
        """
        try:
            # PASSO 1: Preenche o campo "Nome do Benefici√°rio" com o nome da cidade
            if not self.preencher_nome_cidade(cidade):
                return False
            
            # PASSO 2: Clica no primeiro bot√£o "Continuar" para ir para a p√°gina de sele√ß√£o
            if not self.clicar_botao_continuar():
                return False
            
            # PASSO 3: Seleciona especificamente a cidade do estado MG
            if not self.selecionar_cidade_mg(cidade):
                print(f"‚ùå Falha ao selecionar cidade '{cidade}' do estado MG")
                return False
            
            # PASSO 4: Preenche os campos de data inicial e final
            if not self.preencher_datas(data_inicial, data_final):
                return False
            
            # PASSO 5: Clica no segundo bot√£o "Continuar" para ir para a p√°gina de resultados
            if not self.clicar_segundo_botao_continuar():
                return False
            
            # PASSO 6: Extrai dados da p√°gina de resultados (se extrator estiver configurado)
            if hasattr(self, 'data_extractor') and self.data_extractor:
                resultado_extracao = self.data_extractor.processar_pagina_resultados(self.navegador, cidade)
                if resultado_extracao.get('sucesso'):
                    print(f"üìä Dados extra√≠dos: {resultado_extracao.get('registros_encontrados', 0)} registros")
                    print(f"üíæ Arquivo salvo: {resultado_extracao.get('arquivo_salvo', 'N/A')}")
                else:
                    print(f"‚ö†Ô∏è Erro na extra√ß√£o: {resultado_extracao.get('erro', 'Erro desconhecido')}")
            
            print(f"‚úÖ Processamento da cidade '{cidade}' conclu√≠do com sucesso.")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante processamento da cidade '{cidade}': {e}")
            return False
    
    def processar_lista_cidades(self, cidades, data_inicial, data_final):
        """
        Processa uma lista completa de cidades automaticamente
        
        Args:
            cidades (list): Lista de nomes de cidades
            data_inicial (str): Data inicial no formato DD/MM/AAAA
            data_final (str): Data final no formato DD/MM/AAAA
        
        Returns:
            dict: Estat√≠sticas do processamento (sucessos, erros, total)
        """
        total_cidades = len(cidades)
        sucessos = 0
        erros = 0
        resultados_extracao = []  # Para armazenar resultados da extra√ß√£o de dados
        
        print(f"\nüöÄ Iniciando processamento de {total_cidades} cidades...")
        
        for i, cidade in enumerate(cidades, 1):
            print(f"\n--- Processando cidade {i}/{total_cidades}: {cidade} ---")
            
            # Processa a cidade atual
            sucesso = self.processar_cidade(cidade, data_inicial, data_final)
            
            if sucesso:
                sucessos += 1
                # Registra sucesso na extra√ß√£o (ser√° detalhado pelo pr√≥prio extrator)
                resultados_extracao.append({'cidade': cidade, 'sucesso': True})
            else:
                erros += 1
                print(f"‚ùå Falha no processamento da cidade '{cidade}'")
                resultados_extracao.append({'cidade': cidade, 'sucesso': False})
            
            # Volta para a p√°gina inicial para a pr√≥xima cidade (exceto na √∫ltima)
            if i < total_cidades:
                if not self.voltar_pagina_inicial():
                    print("‚ùå Erro cr√≠tico: Imposs√≠vel continuar. Encerrando processamento.")
                    break
                
                # Pausa entre as cidades
                time.sleep(SISTEMA_CONFIG['pausa_entre_cidades'])
        
        # Gera relat√≥rio consolidado se h√° extrator configurado
        if hasattr(self, 'data_extractor') and self.data_extractor and resultados_extracao:
            try:
                relatorio_consolidado = self.data_extractor.gerar_relatorio_consolidado(resultados_extracao)
                if relatorio_consolidado:
                    print(f"üìã Relat√≥rio consolidado gerado: {relatorio_consolidado}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao gerar relat√≥rio consolidado: {e}")
        
        # Retorna estat√≠sticas do processamento
        estatisticas = {
            'total': total_cidades,
            'sucessos': sucessos,
            'erros': erros,
            'taxa_sucesso': (sucessos / total_cidades) * 100 if total_cidades > 0 else 0,
            'resultados_extracao': resultados_extracao
        }
        
        print(f"\nüìä Processamento conclu√≠do!")
        print(f"   Total de cidades: {estatisticas['total']}")
        print(f"   Sucessos: {estatisticas['sucessos']}")
        print(f"   Erros: {estatisticas['erros']}")
        print(f"   Taxa de sucesso: {estatisticas['taxa_sucesso']:.1f}%")
        
        return estatisticas
    
    def aguardar_usuario(self):
        """
        Mant√©m o navegador aberto at√© que o usu√°rio pressione Enter
        """
        print("\nüîç Verifique os resultados na janela do navegador.")
        input("Pressione Enter para fechar o navegador...")
    
    def fechar_navegador(self):
        """
        Fecha o navegador e limpa recursos
        """
        if self.navegador:
            self.navegador.quit()
            print("üîí Navegador fechado.") 